generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model stores {
  id          String        @id @db.Uuid
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(255)
  is_active   Boolean       @default(true)
  created_at  DateTime      @db.Timestamptz(6)
  owner       String        @db.VarChar(255)
  categories  categories[]
  invitations invitations[]
  products    products[]
  providers   providers[]
  roles       roles[]
  owner_user  users         @relation(fields: [owner], references: [id], onDelete: Cascade, map: "user_id")
  user_roles  user_roles[]
}

model users {
  id               String        @id @db.VarChar(255)
  name             String        @db.VarChar(255)
  last_name        String        @db.VarChar(255)
  password         String
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  is_active        Boolean       @default(true)
  icon_url         String?       @db.VarChar(255)
  username         String        @unique @db.VarChar(255)
  email            String        @unique(map: "email") @db.VarChar(255)
  deleted_at       DateTime?     @db.Timestamptz(6)
  updated_at       DateTime?     @updatedAt @db.Timestamptz(6)
  invitations_sent invitations[] @relation("Inviter")
  owned_stores     stores[]
  user_roles       user_roles[]

  @@map("users")
}

model user_roles {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.VarChar(255)
  role_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  is_active  Boolean   @default(true)
  store_id   String    @db.Uuid
  role       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  store      stores    @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, store_id], name: "user_store_role_unique")
  @@map("user_roles")
}

model roles {
  id          String            @id @default(uuid()) @db.Uuid
  name        String            @db.VarChar(50)
  description String?           @db.VarChar(255)
  created_at  DateTime          @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?         @updatedAt @db.Timestamptz(6)
  deleted_at  DateTime?         @db.Timestamptz(6)
  is_active   Boolean           @default(true)
  store_id    String            @db.Uuid
  invitations invitations[]
  permissions role_permission[]
  store       stores            @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user_roles  user_roles[]

  @@unique([name, store_id], name: "roles_name_store_unique")
  @@map("roles")
}

/// * Tabla pivote simplificada para Role <-> Permission
model role_permission {
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  permission    permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}

/// * Modelo de permisos simplificado y program√°tico
model permissions {
  id          String            @id @default(uuid()) @db.Uuid
  description String?           @db.VarChar(255)
  resource    String            @db.VarChar(100)
  action      String            @db.VarChar(50)
  created_at  DateTime          @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?         @updatedAt @db.Timestamptz(6)
  roles       role_permission[]

  @@unique([action, resource])
}

/// * Nuevo modelo para gestionar las invitaciones
model invitations {
  id            String           @id @default(uuid()) @db.Uuid
  email         String           @db.VarChar(255)
  store_id      String           @db.Uuid
  role_id       String           @db.Uuid
  invited_by_id String           @db.VarChar(255)
  token         String           @unique
  status        InvitationStatus @default(PENDING)
  created_at    DateTime         @default(now()) @db.Timestamptz(6)
  expires_at    DateTime         @db.Timestamptz(6)
  invited_by    users            @relation("Inviter", fields: [invited_by_id], references: [id], onDelete: Cascade)
  role          roles            @relation(fields: [role_id], references: [id], onDelete: Cascade)
  store         stores           @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@unique([email, store_id, status], name: "pending_invitation_unique")
}

/// * ----------------------------------------
/// * BUSINESS LOGIC MODELS
/// * ----------------------------------------
model products {
  id          String     @id @db.VarChar(255)
  barcode     String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  store_id    String     @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  provider_id String     @db.VarChar(255)
  category_id String     @db.Uuid
  deleted_at  DateTime?  @db.Timestamptz(6)
  is_active   Boolean    @default(true)
  updated_at  DateTime?  @updatedAt @db.Timestamptz(6)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "category_id")
  providers   providers  @relation(fields: [provider_id], references: [id], onDelete: Cascade, map: "provider_id")
  stores      stores     @relation(fields: [store_id], references: [id], onDelete: Cascade, map: "store_id")
  w_ficha     w_fichas?
}

model w_fichas {
  id         String   @id @db.Uuid
  condition  String   @db.VarChar(255)
  cost       Decimal  @db.Decimal(10, 2)
  benchmark  Decimal  @db.Decimal(10, 2)
  tax        Boolean
  product_id String   @unique @db.VarChar(255)
  product    products @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "product_id")
}

model categories {
  id         String     @id @db.Uuid
  name       String     @db.VarChar(255)
  created_at DateTime   @db.Timestamptz(6)
  updated_at DateTime   @db.Timestamptz(6)
  store_id   String     @db.Uuid
  is_active  Boolean    @default(false)
  deleted_at DateTime?  @db.Timestamptz(6)
  stores     stores     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  products   products[]
}

model providers {
  id            String     @id @db.VarChar(255)
  name          String     @db.VarChar(255)
  description   String?    @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  store_id      String     @db.Uuid
  contact_phone String     @default("NO_CONTACT_PHONE") @db.VarChar(255)
  contact_email String     @default("NO_CONTACT_EMAIL") @db.VarChar(255)
  is_active     Boolean    @default(true)
  deleted_at    DateTime?  @db.Timestamptz(6)
  updated_at    DateTime?  @updatedAt @db.Timestamptz(6)
  products      products[]
  stores        stores     @relation(fields: [store_id], references: [id], onDelete: Cascade, map: "store_id")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
